-- Query 1: Retrieve a specific product/supplier/purchase_order/returnedproducts/promotion/sales_transaction/damaged_products/storage_location
SELECT * FROM Product WHERE ProductID = 'MOB-MAP-MP15';

-- Query 2: List Products from a Specific Supplier
SELECT P.ProductID, P.P_Name AS PName, P.Category, P.SellingPrice, P.StockQuantity AS StockLevel
FROM Product P
JOIN Supplier S ON P.SupplierID = S.SupplierID
WHERE S.S_Name = 'Maple';

-- Query 3: Generate sales summary for a particular date
SELECT TranstDate AS SDate, SUM(TotalAmount) AS TotalSalesAmount
FROM Sales_Transaction
WHERE TranstDate = '2025-02-10'
GROUP BY TranstDate;

-- Query 4: Calculate overall inventory value
CREATE VIEW Inventory_Value AS
SELECT SUM(StockQuantity * CostPrice) AS TotalInventoryValue
FROM Product;

-- To view the result:
SELECT * FROM Inventory_Value;

-- Query 5: Fetch Supplier Orders in a Timeframe
SELECT * FROM Purchase_Order
WHERE SupplierID = 'SUP001'
AND OrderDate BETWEEN '2025-01-01' AND '2025-03-31';

-- Query 6: Find the Top Three Best-Selling Products and their suppliers (Last 3 Months)
SELECT P.ProductID, P.P_Name AS PName, P.SupplierID, COUNT(*) AS UnitsSold
FROM Sales_Transaction ST
JOIN ProductInstance PI ON ST.InstanceID = PI.InstanceID
JOIN Product P ON PI.ProductID = P.ProductID
WHERE ST.TranstDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
GROUP BY P.ProductID, P.P_Name, P.SupplierID
ORDER BY UnitsSold DESC
LIMIT 3;

-- Query 7: Adjust inventory after a sale is made

CREATE FUNCTION update_product_stock()
RETURNS TRIGGER
DETERMINISTIC
BEGIN
    DECLARE current_stock INT;
    
    SELECT StockQuantity INTO current_stock
    FROM Product
    WHERE ProductID = (
        SELECT ProductID
        FROM ProductInstance
        WHERE InstanceID = NEW.InstanceID
    );
    
    IF current_stock <= 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = CONCAT('Cannot sell product ', NEW.InstanceID, ' - out of stock');
    END IF;
    
    UPDATE Product
    SET StockQuantity = StockQuantity - 1
    WHERE ProductID = (
        SELECT ProductID
        FROM ProductInstance
        WHERE InstanceID = NEW.InstanceID
    );
    
    RETURN NEW;
END //

CREATE TRIGGER after_sale_stock_update
AFTER INSERT ON Sales_Transaction
FOR EACH ROW
CALL update_product_stock();

-- Query 8: Adjust the inventory after a product is returned

CREATE FUNCTION returned_product_stock()
RETURNS TRIGGER
DETERMINISTIC
BEGIN
    UPDATE Product
    SET StockQuantity = StockQuantity + 1
    WHERE ProductID = (
        SELECT ProductID
        FROM ProductInstance
        WHERE InstanceID = NEW.InstanceID
    );
    
    RETURN NEW;
END //

CREATE TRIGGER after_return_stock_update
AFTER INSERT ON ReturnedProducts
FOR EACH ROW
CALL returned_product_stock();

-- Query 9: Adjust the inventory after a purchase order is delivered

CREATE FUNCTION update_product_stock_on_delivery()
RETURNS TRIGGER
DETERMINISTIC
BEGIN
    IF NEW.OrderStatus = 'Completed' AND OLD.OrderStatus != 'Completed' THEN
        UPDATE Product
        SET StockQuantity = StockQuantity + (
            SELECT Quantity
            FROM Purchase_Order
            WHERE OrderID = NEW.OrderID
        )
        WHERE ProductID IN (
            SELECT ProductID
            FROM Ordered
            WHERE OrderID = NEW.OrderID
        );
    END IF;
    RETURN NEW;
END //

CREATE TRIGGER after_delivery_of_purchase_order
AFTER UPDATE ON Purchase_Order
FOR EACH ROW
CALL update_product_stock_on_delivery();

-- Query 10: If a returned product is sold, mark its status as 'NowSold'

CREATE FUNCTION mark_returned_product_sold()
RETURNS TRIGGER
DETERMINISTIC
BEGIN
    IF EXISTS (
        SELECT 1 FROM ReturnedProducts
        WHERE InstanceID = NEW.InstanceID
    ) THEN
        UPDATE ReturnedProducts
        SET Status = 'NowSold'
        WHERE InstanceID = NEW.InstanceID;
    END IF;
    RETURN NEW;
END //

CREATE TRIGGER after_sale_of_returned
AFTER INSERT ON Sales_Transaction
FOR EACH ROW
CALL mark_returned_product_sold();

-- Query 11: Check which products’ quantities are less than or equal to reorder threshold
CREATE VIEW products_needing_reorder AS
SELECT p.ProductID, p.P_Name AS PName, p.Category, p.StockQuantity AS StockLevel, p.MinStock AS Threshold, s.S_Name AS Sname, s.S_Contact AS ContactNo, s.S_Email AS Email,
    (SELECT MAX(po.OrderDate)
     FROM Purchase_Order po
     JOIN Ordered o ON po.OrderID = o.OrderID
     WHERE o.ProductID = p.ProductID
     AND po.OrderStatus = 'Completed') AS LastOrderDate
FROM Product p
JOIN Supplier s ON p.SupplierID = s.SupplierID
WHERE p.StockQuantity <= p.MinStock AND p.P_isActive = TRUE
ORDER BY
    (p.MinStock - p.StockQuantity) DESC,
    p.Category;

-- Query 12: Show purchase orders which are pending past their expected delivery date
CREATE VIEW orders_pending_past_expected_del_date AS
SELECT po.OrderID, po.OrderDate, po.ExpectedDeliveryDate AS ExpectedDelDt, po.SupplierID, s.S_Contact AS ContactNo, s.S_Email AS Email
FROM Purchase_Order po
JOIN Supplier s ON po.SupplierID = s.SupplierID
WHERE po.OrderStatus = 'Pending' AND CURDATE() > po.ExpectedDeliveryDate
ORDER BY po.ExpectedDeliveryDate;

-- Query 13: Give 3 suppliers whose products were returned the most in the last 5 months because of damage or fault
SELECT p.SupplierID, COUNT(p.SupplierID) AS Return_Count
FROM ReturnedProducts r
JOIN ProductInstance pi ON r.InstanceID = pi.InstanceID
JOIN Product p ON pi.ProductID = p.ProductID
WHERE r.ReturnDate >= DATE_SUB(CURDATE(), INTERVAL 5 MONTH)
AND (r.Reason = 'Damaged' OR r.Reason = 'Faulty')
GROUP BY p.SupplierID
ORDER BY Return_Count DESC
LIMIT 3;

-- Query 14: Give 3 suppliers whose products were reported damaged the most in the last 5 months
SELECT p.SupplierID, COUNT(p.SupplierID) AS Damage_Count
FROM Damaged_Products d
JOIN ProductInstance pi ON d.InstanceID = pi.InstanceID
JOIN Product p ON pi.ProductID = p.ProductID
WHERE d.DamageDate >= DATE_SUB(CURDATE(), INTERVAL 5 MONTH)
GROUP BY p.SupplierID
ORDER BY Damage_Count DESC
LIMIT 3;

-- Query 15: Discontinue the products whose stock_level took 10 months to reach reorder threshold

CREATE PROCEDURE mark_slow_moving_products_inactive()
BEGIN
    UPDATE Product
    SET P_isActive = FALSE
    WHERE StockQuantity <= MinStock
    AND EXISTS (
        SELECT 1
        FROM (
            SELECT
                p.ProductID,
                MAX(st.TranstDate) AS last_sale,
                (
                    SELECT MIN(st2.TranstDate)
                    FROM Sales_Transaction st2
                    JOIN ProductInstance pi2 ON st2.InstanceID = pi2.InstanceID
                    WHERE pi2.ProductID = p.ProductID
                    AND st2.TranstDate > (
                        SELECT MAX(po.ActualDeliveryDate)
                        FROM Purchase_Order po
                        JOIN Ordered o ON po.OrderID = o.OrderID
                        WHERE po.OrderStatus = 'Completed'
                        AND o.ProductID = p.ProductID
                    )
                ) AS first_sale_after_last_order
            FROM Product p
            JOIN ProductInstance pi ON p.ProductID = pi.ProductID
            JOIN Sales_Transaction st ON st.InstanceID = pi.InstanceID
            GROUP BY p.ProductID
        ) AS sales_data
        WHERE Product.ProductID = sales_data.ProductID
        AND DATEDIFF(sales_data.last_sale, sales_data.first_sale_after_last_order) >= 10 * 30
    );
END //

-- To execute:
CALL mark_slow_moving_products_inactive();

-- Query 16: Delete discontinued products whose stock level is now 0 or it has been 12 months since it was put in the store

CREATE PROCEDURE delete_discontinued_products()
BEGIN
    DELETE FROM Product
    WHERE P_isActive = FALSE
    AND (
        StockQuantity = 0
        OR EXISTS (
            SELECT 1
            FROM (
                SELECT
                    p.ProductID,
                    MAX(st.TranstDate) AS last_sale,
                    (
                        SELECT MAX(po.ActualDeliveryDate)
                        FROM Purchase_Order po
                        JOIN Ordered o ON po.OrderID = o.OrderID
                        WHERE po.OrderStatus = 'Completed'
                        AND o.ProductID = p.ProductID
                    ) AS last_purchase
                FROM Product p
                JOIN ProductInstance pi ON p.ProductID = pi.ProductID
                JOIN Sales_Transaction st ON st.InstanceID = pi.InstanceID
                GROUP BY p.ProductID
            ) AS product_data
            WHERE Product.ProductID = product_data.ProductID
            AND DATEDIFF(product_data.last_sale, product_data.last_purchase) >= 12 * 30
        )
    );
END //

DELETE FROM ProductInstance WHERE ProductID = 'XYZ';
DELETE FROM Ordered WHERE ProductID = 'XYZ';
DELETE FROM Has_Promo WHERE ProductID = 'XYZ';
DELETE FROM Sales_Transaction WHERE ProductID = 'XYZ';
DELETE FROM ReturnedProducts WHERE ProductID = 'XYZ';
DELETE FROM Damaged_Products WHERE ProductID = 'XYZ';